package task.app;

/*
 * 
 * THIS FILE HAS BEEN GENERATED BY class byps.gen.j.GenClient DO NOT MODIFY.
 */

import byps.*;

public class BClient_Taskapp extends BClient { 

	public static BClient_Taskapp createClient(BTransportFactory transportFactory) {
		return new BClient_Taskapp(transportFactory);
	}
	
	public static BClient_Taskapp createClientR(BTransport transport) {
		return new BClient_Taskapp(transport);
	}
	
	public BClient_Taskapp addRemote(BSkeleton_CalculationService remoteSkeleton) throws BException {
		if (serverR == null) throw new BException(BExceptionC.NO_REVERSE_CONNECTIONS, "No reverse connections.");
		serverR.server.addRemote(1984352081, remoteSkeleton);
		return this;
	}
	
	public BClient_Taskapp addRemote(BSkeleton_TaskNotify remoteSkeleton) throws BException {
		if (serverR == null) throw new BException(BExceptionC.NO_REVERSE_CONNECTIONS, "No reverse connections.");
		serverR.server.addRemote(265418285, remoteSkeleton);
		return this;
	}
	
	public BClient_Taskapp addRemote(BSkeleton_TaskService remoteSkeleton) throws BException {
		if (serverR == null) throw new BException(BExceptionC.NO_REVERSE_CONNECTIONS, "No reverse connections.");
		serverR.server.addRemote(216769899, remoteSkeleton);
		return this;
	}
	
	public CalculationServiceAsync getCalculationService() {
		return calculationService;
	}
	public TaskNotifyAsync getTaskNotify() {
		return taskNotify;
	}
	public TaskServiceAsync getTaskService() {
		return taskService;
	}
	
	@Override
	public BRemote getStub(int remoteId) {
		if (remoteId == 1984352081) return calculationService;
		if (remoteId == 265418285) return taskNotify;
		if (remoteId == 216769899) return taskService;
		return null;
	}
	
	protected BClient_Taskapp(BTransportFactory transportFactory) {
		super(
			transportFactory.createClientTransport(), 
			transportFactory.createServerR(
				BServer_Taskapp.createServerR(transportFactory.createServerTransport())
			)
		);
		initStubs(transport);
	}
	
	protected BClient_Taskapp(BTransport transport) {
		super(transport, null);
		initStubs(transport);
	}
	
	protected CalculationServiceAsync calculationService;
	protected TaskNotifyAsync taskNotify;
	protected TaskServiceAsync taskService;
	
	private void initStubs(BTransport transport) {
		calculationService = new BStub_CalculationService(transport);
		taskNotify = new BStub_TaskNotify(transport);
		taskService = new BStub_TaskService(transport);
	}
	
}
